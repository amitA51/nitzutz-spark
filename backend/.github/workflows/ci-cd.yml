name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ═══════════════════════════════════════════════════════════
  # 🔍 SECURITY SCANNING
  # ═══════════════════════════════════════════════════════════
  security-scan:
    name: 🔐 Security Audit
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: 📊 Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: 🕵️ Run GitGuardian scan
        uses: GitGuardian/ggshield-action@v1
        env:
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
        with:
          args: scan ci
          
      - name: 🔒 Check for exposed secrets
        run: |
          echo "🔍 Scanning for exposed secrets..."
          if grep -r "API_KEY\|SECRET\|PASSWORD" --include="*.ts" --include="*.js" .; then
            echo "❌ Found potential exposed secrets!"
            exit 1
          fi
          echo "✅ No exposed secrets found"

  # ═══════════════════════════════════════════════════════════
  # 🧪 CODE QUALITY & TESTING
  # ═══════════════════════════════════════════════════════════
  test:
    name: 🧪 Tests & Quality
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🔨 Build TypeScript
        run: npm run build
        
      - name: 🎨 Lint check
        run: npm run lint
        
      - name: 📏 Type check
        run: npm run type-check
        
      - name: 🧹 Format check
        run: npm run format:check
        
      - name: 🗄️ Run Prisma migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          
      - name: 🧪 Run unit tests
        run: npm run test:unit
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          NODE_ENV: test
          
      - name: 🔬 Run integration tests
        run: npm run test:integration
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          NODE_ENV: test
          
      - name: 📊 Generate coverage report
        run: npm run test:coverage
        
      - name: 📈 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          
      - name: 💾 Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            dist
            node_modules
          key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}

  # ═══════════════════════════════════════════════════════════
  # 📊 CODE ANALYSIS
  # ═══════════════════════════════════════════════════════════
  analyze:
    name: 📊 Code Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔍 Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript
          
      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v2
        
      - name: 🔬 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        
      - name: 📊 SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=nitzutz-spark
            -Dsonar.organization=nitzutz-spark
            -Dsonar.sources=src
            -Dsonar.tests=tests
            -Dsonar.coverage.exclusions=**/*.test.ts,**/*.spec.ts

  # ═══════════════════════════════════════════════════════════
  # 🐳 DOCKER BUILD
  # ═══════════════════════════════════════════════════════════
  docker-build:
    name: 🐳 Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            
      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: 🔍 Scan Docker image
        uses: anchore/scan-action@v3
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          severity-cutoff: high
          fail-build: true

  # ═══════════════════════════════════════════════════════════
  # 🚀 DEPLOY TO STAGING
  # ═══════════════════════════════════════════════════════════
  deploy-staging:
    name: 🎭 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging-api.nitzutz-spark.com
      
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🚀 Deploy to Railway (Staging)
        uses: bervProject/railway-deploy@main
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: nitzutz-spark-staging
          
      - name: ⏱️ Wait for deployment
        run: sleep 30
        
      - name: 🏥 Health check
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://staging-api.nitzutz-spark.com/api/health)
          if [ $response != "200" ]; then
            echo "❌ Health check failed with status: $response"
            exit 1
          fi
          echo "✅ Health check passed"
          
      - name: 🧪 Run smoke tests
        run: npm run test:smoke -- --env=staging

  # ═══════════════════════════════════════════════════════════
  # 🎯 DEPLOY TO PRODUCTION
  # ═══════════════════════════════════════════════════════════
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build, analyze]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://api.nitzutz-spark.com
      
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔔 Notify deployment start
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "🚀 Production deployment started",
              attachments: [{
                color: 'warning',
                text: `Deploying ${process.env.AS_COMMIT} to production`
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          
      - name: 🚀 Deploy to Railway (Production)
        uses: bervProject/railway-deploy@main
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN_PROD }}
          service: nitzutz-spark-production
          
      - name: ⏱️ Wait for deployment
        run: sleep 60
        
      - name: 🏥 Production health check
        run: |
          for i in {1..5}; do
            response=$(curl -s -o /dev/null -w "%{http_code}" https://api.nitzutz-spark.com/api/health)
            if [ $response == "200" ]; then
              echo "✅ Health check passed (attempt $i)"
              break
            fi
            if [ $i -eq 5 ]; then
              echo "❌ Health check failed after 5 attempts"
              exit 1
            fi
            sleep 10
          done
          
      - name: 🧪 Run smoke tests (Production)
        run: npm run test:smoke -- --env=production
        
      - name: 📊 Run load test
        run: |
          echo "⚡ Running load test..."
          # Add your load testing tool here (k6, Artillery, etc.)
          
      - name: 🔔 Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: '✅ Production deployment successful!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          
      - name: 🔔 Notify deployment failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          text: '❌ Production deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          
      - name: 📝 Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## 🚀 Production Deployment
            
            ### Changes in this release
            ${{ github.event.head_commit.message }}
            
            ### Deployed by
            @${{ github.actor }}
            
            ### Deployment time
            ${{ github.event.head_commit.timestamp }}
          draft: false
          prerelease: false

  # ═══════════════════════════════════════════════════════════
  # 📈 MONITORING & NOTIFICATIONS
  # ═══════════════════════════════════════════════════════════
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
      - name: 📊 Send metrics to Datadog
        run: |
          echo "📊 Sending deployment metrics..."
          # Add Datadog API call here
          
      - name: 📧 Send email notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "🚀 Nitzutz Spark - Deployment Status"
          body: |
            Deployment completed!
            
            Status: ${{ job.status }}
            Commit: ${{ github.sha }}
            Branch: ${{ github.ref }}
          to: team@nitzutz-spark.com
          from: ci-cd@nitzutz-spark.com